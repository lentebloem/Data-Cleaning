install.packages("quantmod")
library(quantmod)
df <- data.frame(getSymbols("AAPL", auto.assign = F))
df
AAPL <- tail(df)
class(AAPL)
colnames(AAPL)
colnames(AAPL) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
write.csv(AAPL, "AAPL-Data.csv")
data <- AAPL
Cl(data)
plot(Ad(data), type="l")
length(Ad(data))
100*((Ad(data)[6] - Ad(data)[1])/Ad(data[1])
)
100*((Ad(data)[6] - Ad(data)[1])/Ad(data[1])
0
100*((Ad(data)[6] - Ad(data)[1])/Ad(data[1]))
100*((Ad(data)[6] - Ad(data)[1])/Ad(data)[1])
plot(dailyReturn(Ad(as.xts(data)), type='arithmetic'), type='l')
plot(cumprod(1+dailyReturn(Ad(as.xts(data)), type='arithmetic')))
plot(diff(log(Ad(data))), type='l')
plot(dailyReturn(Cl(as.xts(data)), type='arithmetic'), type='l')
comparedAdtoCl <- data.frame(apply(apply(data[,c("Close", "Adjusted")], 2, log), 2, diff))
plot(comparedAdtoCl[,1], type='l')
lines(comparedAdtoCl[,2], type='l', col="red")
plot(comparedAdtoCl[,1], type='l')
comparedAdtoCl[,1]
comparedAdtoCl[,2]
comparedAdtoCl
comparedAdtoCl <- data.frame(apply(apply(data[,c("Close", "Adjusted")], 2, log), 2, diff))
comparedAdtoCl
compareAdtoClCumSum <- data.frame(apply(comparedAdtoCl, 2, cumsum))
plot(comparedAdtoClCumSum[,1], type='l')
compareAdtoClCumSum
plot(compareAdtoClCumSum[,1], type"l")
plot(compareAdtoClCumSum[,1], type="l")
lines(compareAdtoClCumSum[,2], type='l', col="red")
find.package("devtools")
install.packages("devtools")
find.package('rtools')
find.package("rtool")
install.packages("kernsmooth")
install.packages("KernSmooth")
load(KernSmooth)
x <- 4L
class(x)
x
x <- c(4, TRUE)
class(x)
x
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x,y)
x
x <- list(2, "a", "b", TRUE)
x[2]
x[[2]
]
x[[2]]
x[4
]
x[3]
x[[1,2]]
x[[1:2]]
x[[1]]
x[1]
x <- 1:4
y <- 2
x+y
x <- c(3, 5, 1, 10, 12, 6)
y <- x
y
y[y<=6] <- 0
y
y <- x
y[y<=6] == 0
y[ y %10% 1:5] <- 0
y[ y %in% 1:5] <- 0
y
import("hw1_data.csv")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
x > 5
x <- 0
x
x <- 1:10
if (x > 5) {}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f
f(1)
z <- 10
z <- 1
z <- 10
g(4)
f(3)
f(1)
z <- 4
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
clearPushBack()
clear()
clean
clean()
c
library(reshape2)
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
names(subject_train) <- "subjectID"
names(subject_train) <- "subjectID"
subject_train
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt")
subject_train <- read.table("UCI\ HAR\ Dataset/train/subject_train.txt")
subject_train <- read.table("subject_train.txt")
subject_train <- read.table("test/subject_train.txt")
subject_train <- read.table("train/subject_train.txt")
y_test <- read.table("./test/y_test.txt")
read.table("./test/y_test.txt")
read.table("test/y_test.txt")
read.table("y_test.txt")
read.table("features.txt")
ls
read.file("features.txt")
read.table
read.file
read.table("feature.txt")
read.table("features.txt")
getwd()
setwd
setwd("/Users/lentebloem/Documents/Goals 2018/Data Science Certificate by JHU/Data Cleaning/UCI HAR Dataset")
getwd()
names(subject_train) <- "subjectID"
/Users/lentebloem/Documents/Goals 2018/Data Science Certificate by JHU/Data Cleaning/UCI HAR Dataset
read.table("./train/subject_train.txt")
library(reshape2)
setwd("/Users/lentebloem/Documents/Goals 2018/Data Science Certificate by JHU/Data Cleaning/UCI HAR Dataset")
subject_train <- read.table("./train/subject_train.txt")
X_train <- read.table("./train/X_train.txt")
y_train <- read.table("./train/y_train.txt")
subject_test <- read.table("./test/subject_test.txt")
X_test <- read.table("./test/X_test.txt")
y_test <- read.table("./test/y_test.txt")
names(subject_train) <- "subjectID"
names(subject_test) <- "subjectID"
featureNames <- read.table("features.txt")
names(X_train) <- featureNames$V2
names(X_test) <- featureNames$V2
names(y_train) <- "activity"
names(y_test) <- "activity"
train <- cbind(subject_train, y_train, X_train)
test <- cbind(subject_test, y_test, X_test)
combined <- rbind(train, test)
meanstdcols <- grepl("mean\\(\\)", names(combined)) | grepl("std\\(\\)", names(combined))
meanstdcols[1:2] <- TRUE # ensure that we also keep the subjectID and activity columns
combined <- combined[, meanstdcols] # remove unnecessary columns
combined$activity <- factor(combined$activity, labels=c("Walking",
"Walking Upstairs",
"Walking Downstairs",
"Sitting",
"Standing",
"Laying"))
melted <- melt(combined, id=c("subjectID","activity"))
tidy <- dcast(melted, subjectID+activity ~ variable, mean)
write.csv(tidy, "tidy.csv", row.names=FALSE)
library(reshape2)
install.packages('reshape2')
library(reshape2)
subject_train <- read.table("./train/subject_train.txt")
X_train <- read.table("./train/X_train.txt")
y_train <- read.table("./train/y_train.txt")
subject_test <- read.table("./test/subject_test.txt")
X_test <- read.table("./test/X_test.txt")
y_test <- read.table("./test/y_test.txt")
names(subject_train) <- "subjectID"
names(subject_test) <- "subjectID"
featureNames <- read.table("features.txt")
names(X_train) <- featureNames$V2
names(X_test) <- featureNames$V2
names(y_train) <- "activity"
names(y_test) <- "activity"
train <- cbind(subject_train, y_train, X_train)
test <- cbind(subject_test, y_test, X_test)
combined <- rbind(train, test)
meanstdcols <- grepl("mean\\(\\)", names(combined)) | grepl("std\\(\\)", names(combined))
meanstdcols[1:2] <- TRUE # ensure that we also keep the subjectID and activity columns
combined <- combined[, meanstdcols] # remove unnecessary columns
combined$activity <- factor(combined$activity, labels=c("Walking",
"Walking Upstairs",
"Walking Downstairs",
"Sitting",
"Standing",
"Laying"))
melted <- melt(combined, id=c("subjectID","activity"))
tidy <- dcast(melted, subjectID+activity ~ variable, mean)
write.csv(tidy, "tidy.csv", row.names=FALSE)
library(reshape2)
library(reshape2)
# 1. Merges the training and the test sets to create one data set.
# Read data
subject_train <- read.table("./train/subject_train.txt")
X_train <- read.table("./train/X_train.txt")
y_train <- read.table("./train/y_train.txt")
subject_test <- read.table("./test/subject_test.txt")
X_test <- read.table("./test/X_test.txt")
y_test <- read.table("./test/y_test.txt")
# Add column name for subject files
names(subject_train) <- "subjectID"
names(subject_test) <- "subjectID"
# Add column names for measurement files
featureNames <- read.table("features.txt")
names(X_train) <- featureNames$V2
names(X_test) <- featureNames$V2
# Add column name for label files
names(y_train) <- "activity"
names(y_test) <- "activity"
# Combine files into one dataset
train <- cbind(subject_train, y_train, X_train)
test <- cbind(subject_test, y_test, X_test)
combined <- rbind(train, test)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# Find columns that contain "mean()" or "std()"
meanstdcols <- grepl("mean\\(\\)", names(combined)) | grepl("std\\(\\)", names(combined))
meanstdcols[1:2] <- TRUE # Keep the subjectID and activity columns
combined <- combined[, meanstdcols] # Remove unuseful columns
# 3. Uses descriptive activity names to name the activities in the data set
# 4. Appropriately labels the data set with descriptive variable names
combined$activity <- factor(combined$activity, labels=c("Walking",
"Walking Upstairs",
"Walking Downstairs",
"Sitting",
"Standing",
"Laying"))
# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
melted <- melt(combined, id=c("subjectID","activity"))
tidy <- dcast(melted, subjectID+activity ~ variable, mean)
write.csv(tidy, "tidy.txt", row.names=FALSE)
write.table(tidy, "tidy_data.txt", row.names=FALSE)
